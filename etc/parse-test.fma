using System;

@!somelanguage{
  So, basically, I can just put whatever here. }}}]]]
  '
  "
@}

@!meta{
@@ let @if = function(`({cond}) {then} else {else}`) {
@@   1 + 2;
@@ };

@@ This is MetaForma (@ is the only "special" character)

  let Point = struct {
    let int x;
    let int y;
  }; @@ This is an empty statement

  let factorial = function(int x) =>
    if (x == 1) 1;
    else x * factorial(x - 1);

  let fibonacci = function(int n) =>
    if (n < 2) 1;
    else fibonacci(n - 1) + fibonacci(n - 2);

  let @if = record(Expression expr, Statement then, Statement @else);

  let stuff = function(int a, int b) => 18 % 4 + 2 * 3 / 4 / 5 + 6;

  try;
  finally;

  if (false);

  try;
  catch;

  next 5;

  return 5;

  return;

  yield 17;

  let myfn = function() {
    if (let a = 1; a == 0)
      if (b);
      else;
  }

  loop {
    ++j;
  }

  while (x) ;

  while (let x = 15; if (12 <= x) y; @[<--Bad@] else z; @[<--Bad@]) ; @@ Too many semicolons here.

  do ; while (y);

  do ; while (let j = 5; j + 1);

  for (let i = 0; i < 10; ++i) ;

  unless (this.failed()) ;
  for (let x = true; x != false; x = false) ;
  let x = 1462;
  x += 1;
  x -= 1;
  x *= y += 1;
  x /= 2;
  x %= 5;
  x ^= 0b1010;

  10 += 5; @@ Okay, this needs to not work eventually.

  unless (x) ;
  else ; @@ For consistency, not style - I personally don't really like unless-else

  if (let a = 1; a + 1) {
  }

  {
    hi();
  }

  let MyRecord = record(int a, char b);

  switch (3) {
    case 7:
      break;
    case MyRecord(int a, char b):
      break;
    default:
      break;
  }

  let awesome = if (true) {
    a();
    13;
  } else {
    b();
    27;
  }

  let pi = 3.14159;

  let num = .3;

  let stuff = (pi + 1) / 2;
  (1 + 2 * 3).test()["hi"].x["some", stuff()](1, 2);
@}

@#pragma warning disable 3200

@[
  This is the entry point for our program.
  The return value is the program's return status code.
@]

let main = function(int argc, char **argv) -> int {
  print("Hi there!"); @@ Make sure this stuff works.

  return 0;
}