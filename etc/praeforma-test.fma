using System;

@!somelanguage{
  So, basically, I can just put whatever here. }}}]]]
  '
  "
@}

@!prae{
  let Point => struct {
    let double x;
    let double y;
  };

  let Point(of: T) => struct {
    let T x;
    let T y;
  };

  let MyBool => variant {
    let True => void;
    let False => void;
  };

  let MaybeInt => variant {
    let Just => int;
    let None => void;
  };

  let Comparable => interface {};
  let Printable => interface {};

  let Comparable a [minWith: Comparable b] => if (a > b) b else a;
  let Comparable a [maxWith: Comparable b] => if (a < b) b else a;

  let OutStream s [print: String str]  => s[append: str][append: "\n"];
  let OutStream s [print: Printable p] => s[print: num[toString]];

  let String str [replace: String a with: String b] => str; @@ stub

  let min = (of: a, and: b) => if (a < b) a else b,
      max = (of: a, and: b) => if (a > b) a else b,
      test = () => (let cout = 0; cout[print: "This is just a test."]); @@ TODO: Fix cout

  test!;

  let cout = nil, Rect = nil, assert = nil, trySomething = nil; @@ Because there's no standard library

  let addme = (a: a, b: b) => a + b;

  addme?[a: 1 b: 2]!;
  addme?[a: 1]?[b: 2]!;
  addme[a:1 b:2];
  let addone = addme?[a: 1];

  @@ {1, 2, 3} [apply: addone..!];

  let mycurried = addme?[a: 1];
  let sum = mycurried[b: 1];
  let mycurriedsum = mycurried?[b: 1];
  let sumagain = mycurriedsum!;
  let sumthirdtime = addme?[b: 1][a: 1];
  let sumstrict = addme?[a: 1 b: 1];
  sumstrict!;

  let a = (let x = 1, y = 2; trySomething[b: x a: y]);

  if (let x = 1, y = 2, z = trySomething[b: x a: y]; z) {
    cout [print: z];
  };

  @@ if (let x = functionthatmightfail!) {

  @@ }

  cout
    [print: 2 + 3]
    [print: 2 * (3 + 5)]
    [print: 7 % (let x = 5; x)]
    [print: 23 * { 3; 4; 5[exp: 2]; }]
    [print: "hi" + 23[toString]]
    [print: "x + 3 is " + (let x = 5; x + 3)[toString]]
    [print: "hi"[replace: "hi" with: "bye"][toUpper]]
    [print: "hi"]
    [print: (let x = 3, y = 2; "Min of x and y is: " + (if (x < y) x else y))]
    [print: min[of: 3 and: 2]]
    [print: (let x = 3, y = 2; "Min of x and y is: " + min[of: x and: y])]
    [print: 1.5[toString][replace: "." with: ","]];

  Rect[w: 16 h: 9];

  let fn = Rect?[w: 7];

  assert[
    expected: Rect[w: 7 h: 3]
    actual: fn[h: 3]
  ];

  let myFn = (a: a, b: b) => {
    return 5;
  };

  let compare = (min: Bool min) =>
    if (min) (a: a, b: b) => (if (a < b) a else b)
    else (a: a, b: b) => (if (a > b) a else b);

  let functional = () => 5;

  let functionalWhere = () => (let x = 5; x);
  let imperative = () => { let x = 5; x; };

  var my = (let a = 5; a);
  var your = (var b = 5; b);

  {
    your += 5;
  };

  your = my = -1;

  while (var i = 0, j = 10; i + j < 100) ++i;

  while (var i = 0; i < 100) {
    cout[print: i + (if (i % 2 == 0) " is even" else " is odd")];
    ++i;
  };

  {
    let a = 123,
      b = 0xa07FFffFu,
      bad = 255y,
      c = 1e5,
      d = 0b1e3,
      e = 0o711_644,
      f = 2.75f, @@ TODO: Make this load something that's not a dummy value
      g = 8.3419521813242314d,
      h = -1;
  };
@}

@@ @!prae{
@@   []
@@ @}

@#pragma warning disable 3200

@[
  This is the entry point for our program.
  The return value is the program's return status code.
@]

let main = function(int argc, char **argv) -> int {
  print("Hi there!"); @@ Make sure this stuff works.

  return 0;
}