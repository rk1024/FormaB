using System;

@!somelanguage{
  So, basically, I can just put whatever here. }}}]]]
  '
  "
@}

@!prae{
  let min = (of:, and:) => if (of < and) of else and,
    max = (of:, and:) => if (of > and) of else and,
    test = () => (let cout = 0; cout[print: "This is just a test."]); @@ TODO: Fix cout

  test[call];

  let cout = 0; @@ TODO: Fix cout

  cout
    [print: 2 + 3]
    [print: 2 * (3 + 5)]
    [print: 7 % (let x = 5; x)]
    @@ [print: 23 * { 3; 4; 5[exp: 2]; }]
    [print: "hi" + 23[toString]]
    [print: "x + 3 is " + (let x = 5; x + 3)[toString]]
    [print: "hi"[replace: "hi" with: "bye"][toUpper]]
    [print: "hi"]
    [print: (let x = 3, y = 2; "Min of x and y is: " + (if (x < y) x else y))]
    [print: min[of: 3 and: 2]]
    [print: (let x = 3, y = 2; "Min of x and y is: " + min[of: x and: y])]
    [print: 1.5[toString][replace: "." with: ","]];

  @@ 3++;

  @@ [Rect w: 16 h: 9];

  @@ let fn = [Rect curry: (2, 1)];

  @@ [assert
  @@   expected: [fn call: (7, 3)]
  @@   actual: [fn call: 7 | call: 3]
  @@ ];

  @@ let myFn = (a:, b:) => {
  @@   [Kernel @return: 5];
  @@ };

  let compare = (min:) =>
    if (min) (a:, b:) => (if (a < b) a else b)
    else (a:, b:) => (if (a > b) a else b);

  let functional = () => 5;

  let functionalWhere = () => (let x = 5; x);
  let imperative = () => { let x = 5; x; };

  var my = (let a = 5; a);
  var your = (var b = 5; b);

  {
    your += 5;
  };

  your = my = -1;

  while (var i = 0; i < 100) ++i;

  while (var i = 0; i < 100) {
    cout[print: i + (if (i % 2 == 0) " is even" else " is odd")];
    ++i;
  };

  {
    let a = 123,
      b = 0xa07FFffFu,
      bad = 255y,
      c = 1e5,
      d = 0b1e3,
      e = 0o711_644,
      @@ f = 2.75f,
      @@ g = 8.3419521813242314d
      h = -1
      ;
  };
@}

@@ @!prae{
@@   []
@@ @}

@#pragma warning disable 3200

@[
  This is the entry point for our program.
  The return value is the program's return status code.
@]

let main = function(int argc, char **argv) -> int {
  print("Hi there!"); @@ Make sure this stuff works.

  return 0;
}