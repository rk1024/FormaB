#!/usr/bin/env ruby

require "fileutils"
require "yaml"

def lcs(a, b)
  prev = curr = nil
  startA = stopA = startB = stopB = -1

  prevB = 0
  b.each do |wb, posB|
    prevA = 0
    curr = []

    a.each_with_index do |(wa, posA), i|
      orthoMax = [curr[-1] || 0, prev && prev[i] || 0].max

      curr << if wa == wb
        (prev && i != 0 && prev[i - 1] + 1 || 1).tap do |l|
          if l > orthoMax
            startA = prevA if startA < 0 || prevA < startA
            startB = prevB if startB < 0
            stopA = posA if posA > stopA
            stopB = posB
          end
        end
      else
        orthoMax
      end

      prevA = posA
    end

    prev = curr
    prevB = posB
  end

  [curr && curr[-1] || 0, Range.new(startA, stopA, false), Range.new(startB, stopB, false)]
end

config = YAML.load(File.open(File.join(File.dirname($0), "license.yaml")))

search = config.fetch("search", []).group_by{|p| p[0] }.map{|k, v| [k, v.map{|s| s[1..-1] }] }.to_h

exclude = search.fetch("-", [])
files = search.fetch("+", []).flat_map{|p| Dir[p] }.select{|f| File.file?(f) }
  .reject{|f| exclude.any?{|e| File.fnmatch?(f, e) } }

formats = config.fetch("format", {}).map{|k, v| [k, v] }

notice = config.fetch("notice") { raise "Notice not found in config!" }.split(/\n/)

notice.shift while notice[0].empty?
notice.pop while notice[-1].empty?

notice.unshift("")
notice.push("")

notice.each{|l| l.gsub!(/\$\{YEAR\}/i, Time.now.year.to_s) }

n_files = files.count

puts "INFO: Checking #{n_files} file(s)..."

ret = 0

begin
  files.each_with_index do |file, index|
    if $stderr.tty?
      $stderr << "\r\e[K[#{index + 1}/#{n_files}] #{file}"
      do_erase = true
    end

    print = lambda do |*args|
      if do_erase
        $stderr << "\r\e[K"
        do_erase = false
      end

      puts(*args)
    end

    matches = formats.select{|g, _| File.fnmatch(g, file, File::FNM_EXTGLOB) }

    if matches.empty?
      print.("ERROR: no patterns matched '#{file}'")
      ret = 1
      next
    end

    print.("WARNING: multiple patterns matched '#{file}': #{matches.map{|p, _| "'#{p}'" }.join(", ")}") if matches.length > 1

    format = matches[0][1]

    str = ""
    body = ""
    width = 0

    notice.each do |line|
      curr = format["line"] % [line.gsub(/\$\{FILE\}/, File.basename(file))]
      curr.rstrip!

      body << curr << "\n"

      width = [curr.strip.length, width].max
    end

    do_border = lambda do |fmt|
      str << fmt % [format["border"] * [0, ((width - (fmt % [""]).length) / format["border"].length)].max] << "\n"
    end

    do_border.(format["start"])
    str << body
    do_border.(format["end"])
    str << "\n"

    a = Enumerator.new do |y|
      pos = 0
      str.split(/(\s+)/).each_with_index do |word, idx|
        pos += word.length
        y << [word, pos] if idx % 2 == 0
      end
    end

    b = Enumerator.new do |y|
      pos = 0
      File.foreach(file) do |line|
        line.split(/(\s+)/).each_with_index do |word, idx|
          pos += word.length
          y << [word, pos] if idx % 2 == 0
        end
      end
    end

    lcs_len, lcs_a, lcs_b = lcs(a, b)

    overwrite = lambda do |&block|
      file2 = "#{file}~"

      file2 << "~" while File.exist?(file2)

      begin
        File.open(file2, "w") do |f|
          block.(f)
        end

        FileUtils.mv(file2, file)
      rescue Exception => e
        File.delete(file2)

        raise e
      end
    end

    lcs_frac = lcs_len / a.count.to_f
    len_diff = (lcs_a.size - lcs_b.size).abs / [lcs_a.size, lcs_b.size].max.to_f

    if lcs_frac <= 0.35
      overwrite.() do |f|
        f << str
        File.open(file, "r") {|g| IO.copy_stream(g, f) }
      end

      print.("INFO: added license notice to '#{file}'#{" (#{(lcs_frac * 100).round(2)}% match)" if lcs_a.size != 0 || lcs_b.size != 0}")

      ret = 1 if ret == 0
    elsif lcs_len != a.count
      ret = 1 if ret == 0
      if len_diff <= 0.65
        print.("INFO: file '#{file}' appears to have a slightly-altered header (#{(len_diff * 100).round(2)}% difference); replacing")

        overwrite.() do |f|
          File.open(file, "r") do |g|
            IO.copy_stream(g, f, lcs_b.begin)
            f << str
            g.seek(lcs_b.end + 2)
            IO.copy_stream(g, f)
          end
        end
      else
        print.("ERROR: file '#{file}' appears to have an altered license header (#{(len_diff * 100).round(2)}% difference)")
        ret = 2
      end
    end
  end
ensure
  $stderr << "\n" if $stderr.tty?
end

puts "INFO: Done."

exit(ret)
