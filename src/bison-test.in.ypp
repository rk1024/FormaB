%define parse.error verbose
%defines
%language "c++"
%locations
%name-prefix "frma"

%define parse.trace

%param {frma::FormaParserTag *tag}

%code requires {
#include "ast.hpp"
#include "parserTag.hpp"
}

%code provides {
#define YYSTYPE frma::parser::semantic_type
#define YYSTRIM($$) if (!$$->rooted()) delete $$;
#undef yylex


int frmalex(YYSTYPE *, frma::location *, void *);

static inline int yylex(YYSTYPE *yylval, frma::location *yylloc, frma::FormaParserTag *tag) {
  return frmalex(yylval, yylloc, tag->scan);
}
}

%code {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunreachable-code"
}

%astgen-union

%astgen-dtors

%token-table

%astgen-token-defs
%token end 0 "end of file"

%astgen-types

%type <_primaries> Input
%type <_token> Identifier

%start Input

%initial-action {
  @$.begin.filename = @$.end.filename = &tag->filename();
}

%%
Input: PrimariesOpt { $$ = $1; tag->prims = $1; };

%astgen-rules

Identifier:
  UnescapedIdentifier[ident] { $$ = $ident; } |
  EscapedIdentifier[ident] { $$ = $ident; };

CommaOpt:
  %empty |
  ",";
%%

void frma::parser::error(const frma::location &loc, const std::string &msg) {
  if (!(tag->lexFail && loc == tag->lexFailPos)) tag->error(loc, msg);
}

#pragma clang diagnostic pop