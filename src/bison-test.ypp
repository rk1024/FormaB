%define parse.error verbose
%defines
%language "c++"
%locations
%name-prefix "frma"

%param {frma::FormaParserTag *tag}

%code requires {
#include "ast.hpp"
#include "parserTag.hpp"
}

%code provides {
#define YYSTYPE frma::parser::semantic_type
#define YYSTRIM($$) if (!$$->rooted()) delete $$;
#undef yylex


int frmalex(YYSTYPE *, frma::location *, void *);

static int yylex(YYSTYPE *yylval, frma::location *yylloc, frma::FormaParserTag *tag) {
  return frmalex(yylval, yylloc, tag->scan);
}
}

%union {
  frma::FormaAST *    _ast;
  frma::FormaPrims *  _prims;
  frma::FormaPrim *   _prim;
  frma::FormaIdent *  _ident;
  frma::FormaPP *     _pp;
  frma::FormaLiteral *_literal;
  frma::FormaOper *   _oper;
  frma::FormaGroup *  _group;
}

%destructor { if (!($$->rooted() || tag->prims == $$)) delete $$; } <_prims>;
%destructor { YYSTRIM($$); } <_prim>;
%destructor { YYSTRIM($$); } <_ident>;
%destructor { YYSTRIM($$); } <_pp>;
%destructor { YYSTRIM($$); } <_literal>;
%destructor { YYSTRIM($$); } <_oper>;
%destructor { YYSTRIM($$); } <_group>;

%token Comment

%token LParen   "("
%token RParen   ")"
%token LBracket "["
%token RBracket "]"
%token LBrace   "{"
%token RBrace   "}"

%token <_oper>    Operator
%token <_ident>   Identifier
%token <_pp>      PPDirective
%token <_literal> Number
%token <_literal> SQLiteral
%token <_literal> DQLiteral

%type <_prims>    Input
%type <_prims>    PrimariesOpt
%type <_prims>    Primaries
%type <_prim>     Primary
%type <_literal>  Literal
%type <_group>    PGroup
%type <_group>    KGroup
%type <_group>    CGroup

%start Input

%initial-action {
  @$.begin.filename = @$.end.filename = &tag->filename();
}

%%
Input: PrimariesOpt { $$ = $1; tag->prims = $1; };

PrimariesOpt:
  %empty    { $$ = new FormaPrims(nullptr); } |
  Primaries { $$ = $1; };

Primaries:
  Primary                       { $$ = new FormaPrims($1); } |
  Primaries[init] Primary[prim] { $$ = new FormaPrims($init, $prim); };

Primary:
  PGroup      { $$ = new FormaPrim($1); } |
  KGroup      { $$ = new FormaPrim($1); } |
  CGroup      { $$ = new FormaPrim($1); } |
  Identifier  { $$ = new FormaPrim($1); } |
  PPDirective { $$ = new FormaPrim($1); } |
  Literal     { $$ = new FormaPrim($1); } |
  Operator    { $$ = new FormaPrim($1); };

Literal:
  Number    { $$ = $1; } |
  SQLiteral { $$ = $1; } |
  DQLiteral { $$ = $1; };

PGroup: "(" PrimariesOpt[prims] ")" { $$ = new FormaGroup(FormaGroup::PGroup, $prims); };
KGroup: "[" PrimariesOpt[prims] "]" { $$ = new FormaGroup(FormaGroup::KGroup, $prims); };
CGroup: "{" PrimariesOpt[prims] "}" { $$ = new FormaGroup(FormaGroup::CGroup, $prims); };
%%

void frma::parser::error(const frma::location &loc, const std::string &msg) {
  tag->error(loc, msg);
}
