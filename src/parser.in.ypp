/*************************************************************************
 *
 * FormaB - the bootstrap Forma compiler (parser.in.ypp)
 * Copyright (C) 2017-2018 Ryan Schroeder, Colin Unger
 *
 * FormaB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * FormaB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with FormaB.  If not, see <https://www.gnu.org/licenses/>.
 *
 ************************************************************************/

%define parse.error verbose
%defines
%language "c++"
// %locations
%name-prefix "fps"

// TODO: This should only happen in debug mode
%define parse.trace

// %define YYSTYPE "fps::parser::semantic_type"
%define api.location.type {fdi::FLocation}

%param {fps::FParserTag *tag}
%param {fps::FLexer *lex}

%code requires {
#include "parser/ast.hpp"
#include "parser/lexerDriver.hpp"
#include "parser/parserTag.hpp"
}

%code provides {
#define YYSTYPE fps::parser::semantic_type
#define YYLTYPE fdi::FLocation
#define YYSTRIM($$) if (!$$->rooted()) delete $$;
#undef yylex

int frmalex(YYSTYPE *, YYLTYPE *, void *);

static inline int yylex(YYSTYPE *yylval,
                        YYLTYPE *yylloc,
                        fps::FParserTag *tag,
                        fps::FLexer *) {
  return frmalex(yylval, yylloc, tag->scan);
}
}

%code {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wimplicit-fallthrough"
#pragma clang diagnostic ignored "-Wunreachable-code"
}

%astgen-union

%astgen-dtors

%token-table

%astgen-token-defs

%astgen-types

%start TranslationUnit

%initial-action {
  lex->init();
  @$ = fdi::FPosition(tag->filename(), 1, 1);
}

%%
TranslationUnit:
  Inputs { tag->inputs = $1; } |
  %empty { tag->inputs = nullptr; };

%astgen-rules

%%

void fps::parser::error(const YYLTYPE &loc, const std::string &msg) {
  YYCDEBUG << "Reporting error: " << msg << std::endl;
  if (!(tag->lexFail && loc == tag->lexFailPos)) tag->error(loc, msg);
}

#pragma clang diagnostic pop