/*************************************************************************
 *
 * FormaB - the bootstrap Forma compiler (parser.in.ypp)
 * Copyright (C) 2017-2018 Ryan Schroeder, Colin Unger
 *
 * FormaB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * FormaB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with FormaB.  If not, see <https://www.gnu.org/licenses/>.
 *
 ************************************************************************/

%define parse.error verbose
%defines
%language "c++"
%locations
%name-prefix "frma"

%define parse.trace

%param {frma::FormaParserTag *tag}
%param {frma::lexer *lex}

%code requires {
#include "ast.hpp"
#include "lexerDriver.hpp"
#include "parserTag.hpp"
}

%code provides {
#define YYSTYPE frma::parser::semantic_type
#define YYSTRIM($$) if (!$$->rooted()) delete $$;
#undef yylex

int frmalex(YYSTYPE *, frma::location *, void *);

static inline int yylex(YYSTYPE *yylval, frma::location *yylloc, frma::FormaParserTag *tag, frma::lexer *) {
  return frmalex(yylval, yylloc, tag->scan);
}
}

%code {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wimplicit-fallthrough"
#pragma clang diagnostic ignored "-Wunreachable-code"
}

%astgen-union

%astgen-dtors

%token-table

%astgen-token-defs
%token end 0 "end of file"

%astgen-types
%type <_primaries> Input
%type <_token> Identifier
%type <_token> AtomKeyword

%start Input

%initial-action {
  lex->init();
  @$.begin.filename = @$.end.filename = &tag->filename();
}

%%
Input: PrimariesOpt { $$ = $1; tag->prims = $1; };

%astgen-rules

Identifier:
  UnescapedIdentifier[self] { $$ = $self; } |
  EscapedIdentifier[self] { $$ = $self; };

AtomKeyword:
  UnescapedAtomKeyword[self] { $$ = $self; } |
  EscapedAtomKeyword[self] { $$ = $self; };

CommaOpt:
  %empty |
  ",";
%%

void frma::parser::error(const frma::location &loc, const std::string &msg) {
  YYCDEBUG << "Reporting error: " << msg << std::endl;
  if (!(tag->lexFail && loc == tag->lexFailPos)) tag->error(loc, msg);
}

#pragma clang diagnostic pop