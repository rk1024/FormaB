/*************************************************************************
 *
 * FormaB - the bootstrap Forma compiler (scanner.in.lpp)
 * Copyright (C) 2017-2018 Ryan Schroeder, Colin Unger
 *
 * FormaB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * FormaB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with FormaB.  If not, see <https://www.gnu.org/licenses/>.
 *
 ************************************************************************/

%option nodefault warn backup perf-report
%option 8bit
%option batch never-interactive
%option stack
%option bison-bridge bison-locations
%option reentrant pointer
%option prefix="frma"

%option noyywrap

/* TODO: Only do this in debug builds */
%option debug

%top{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wimplicit-fallthrough"
#pragma clang diagnostic ignored "-Wold-style-cast"
#pragma clang diagnostic ignored "-Wunreachable-code"
#pragma clang diagnostic ignored "-Wunused-function"
}

%{
#include "parser/parserTag.hpp"
#include "parser/lexerDriver.hpp"
#include "parser.hpp"

#define YYSTYPE fps::parser::semantic_type
#define YYLTYPE fdi::FLocation
#define YY_EXTRA_TYPE fps::FParserTag *
#define YY_DECL int frmalex(YYSTYPE *yylval_param,                             \
                            YYLTYPE *yylloc_param,                             \
                            yyscan_t yyscanner)

using tk = fps::parser::token;

#define $x yyg->yyextra_r

#define $E(value) $x->error(*yylloc, std::string("lexical error: ") + value);

#define $F(value) do { \
  $E(value); \
  yyterminate(); \
} while (false);

#define $SSBEGIN(value) BEGIN(SS##value);
#define $SSPUSH(value) yy_push_state(SS##value, yyscanner);
#define $SSPOP yy_pop_state(yyscanner);

#define $END yyterminate();

#define $BS $x->bufStart();
#define $BE $x->bufEnd();
#define $BR $x->bufReturn();

#define $BW $x->buf() << yytext;

#define $BSW $BS $BW

#define $SL yylloc->step();

#define $MN(n) yylloc->columns(n);

#define $WN(n) do { \
  yylloc->lines(n); \
  yylineno += n; \
} while (false);

#define $ML $MN(yyleng)
#define $MO $MN(1)

#define $WL $WN(yyleng)
#define $WO $WN(1)

#define $LN(n) yyless(n);

YY_DECL;
%}

%astgen-token-defs

Whitespace [ \r\t]
Newline [\v\n]

LCommentOpen @@
ShebangCommentOpen #!
LCommentClose [\v\n]
LCommentInput [^\v\n]

BCommentOpen @\[
BCommentClose @+\]
BCommentNoAt [^@\v\n]
BCommentAts @+[^\]\v\n]?

%x SSStart
%x SSBComment

%%
<SSStart>{
  {ShebangCommentOpen}{LCommentInput}*{LCommentClose} { $SL $WO $SSPOP $BS }
  . { $SSPOP $LN(0) $BS }
}

%astgen-token Fragment /[^@]+/ { $SL $ML } capture

<*>{
  {Newline}+ { $SL $WL }

  . { $SL $ML $E(std::string("unexpected character '") + yytext + "'") }
}
%%

namespace fps {
  FLexer::FLexer(fps::FParserTag &tag) {
    if (int ret = frmalex_init_extra(&tag, &m_yyscanner))
      throw std::runtime_error(std::string("scanner constructor failed, code ")
                               + std::to_string(ret));

    tag.scan = m_yyscanner;
  }

  FLexer::~FLexer() {
    if (int ret = frmalex_destroy(m_yyscanner))
      throw std::runtime_error(std::string("scanner destructor failed, code ")
                               + std::to_string(ret));
  }

  void FLexer::init() {
    yy_push_state(SSStart, m_yyscanner);
  }

#if defined(_DEBUG)
  bool FLexer::debug() const { return frmaget_debug(m_yyscanner); }

  void FLexer::debug(bool value) { frmaset_debug(value, m_yyscanner); }
#endif

  FILE *FLexer::inFile() const { return frmaget_in(m_yyscanner); }

  void FLexer::inFile(FILE *value) { frmaset_in(value, m_yyscanner); }

  FILE *FLexer::outFile() const { return frmaget_out(m_yyscanner); }

  void FLexer::outFile(FILE *value) { frmaset_out(value, m_yyscanner); }
}

#pragma clang diagnostic pop